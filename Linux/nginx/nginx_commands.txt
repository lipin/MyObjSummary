Ngiux :
	1.开启目录访问权限 autoindex
	 在 /usr/local/ngiux/conf/ngiux.conf 添加
	location / 
	{   
        root /data/www/file                     //指定实际目录绝对路径；   
        autoindex on;                            //开启目录浏览功能；   
        autoindex_exact_size off;            //关闭详细文件大小统计，让文件大小显示MB，GB单位，默认为b；   
        autoindex_localtime on;              //开启以服务器本地时区显示文件修改日期！   
	}	
	2.域名添加 
	  在 /usr/local/ngiux/conf/vhost 新增 www.abc.com.conf 文件
	  要确保ngiux.conf 中有 include vhost/*.conf; 
	  内容如下:
		server
		    {
		        listen 80;  				// 监听的端口号
		        #listen [::]:80; 			//其他端口
		        server_name www.abc.com;	//域名
		        index index.html index.htm index.php default.html default.htm default.php; //默认进入的index
		        root  /home/wwwroot/min.com/Merchant;  // 网站目录

		        include other.conf;        //引入其他配置
		        #error_page   404   /404.html;  // 错误页面
		        location ~ [^/]\.php(/|$)
		        {
		            # comment try_files $uri =404; to enable pathinfo
		            try_files $uri =404;
		            fastcgi_pass  unix:/tmp/php-cgi.sock;
		            fastcgi_index index.php;
		            include fastcgi.conf;
		            #include pathinfo.conf;
		        }

		        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
		        {
		            expires      30d;
		        }

		        location ~ .*\.(js|css)?$
		        {
		            expires      12h;
		        }

		        access_log off;
		    }
	3.让http自动跳https(重写)	    
		server {  
			listen  192.168.1.111:80;  
			server_name test.com;  

			rewrite ^(.*)$  https://$host$1 permanent;  
		} 
	4.配置https访问(web:http://www.linuxidc.com/Linux/2013-08/88271.htm)	
		为了统一建议在对应的nginx.conf下生产ssh的数据,https默认端口443
		# 生成一个RSA密钥 
		$ openssl genrsa -des3 -out 33iq.key 1024

		# 拷贝一个不需要输入密码的密钥文件
		$ openssl rsa -in 33iq.key -out 33iq_nopass.key

		# 生成一个证书请求
		$ openssl req -new -key 33iq.key -out 33iq.csr

		# 自己签发证书
		$ openssl x509 -req -days 365 -in 33iq.csr -signkey 33iq.key -out 33iq.crt

		# 证书签发信息
		  openssl genrsa -des3 -out 33iq.key 1024
		  输入密码信息
		  openssl req -new -key 33iq.csr
		  配置证书相关信息


		# https配置
		server {
		    server_name YOUR_DOMAINNAME_HERE;
		    listen 443;
		    ssl on;
		    ssl_certificate /usr/local/nginx/conf/33iq.crt;
		    ssl_certificate_key /usr/local/nginx/conf/33iq_nopass.key;
		    # 若ssl_certificate_key使用33iq.key，则每次启动Nginx服务器都要求输入key的密码。
		}
		#http和https共存 方法1
			server {
			    server_name YOUR_DOMAINNAME_HERE;
			    listen 443 ssl;
			    listen 80 ;
			    # ssl on; 关闭
			    ssl_certificate /usr/local/nginx/conf/33iq.crt;
			    ssl_certificate_key /usr/local/nginx/conf/33iq_nopass.key;
			   
		}
		#http和https共存 方法2(推荐) 
		(https配置)
		server {
	        listen      443 ssl;
	        server_name  localhost;
	        ssl_certificate /usr/local/nginx/conf/33iq.crt;
	        ssl_certificate_key /usr/local/nginx/conf/33iq_nopass.key;
        }
        (http重定向)
        server {
	        listen       80;
	        server_name localhost;
	        rewrite ^(.*)$  https://$host$1 permanent ;
    	}

		使用HTTPS协议，对服务器来说是很大的负载开销。从性能上考虑，我 们无法做到对于每个用户的每个访问请求都进行安全加密（当然，Google这种大神除外）。
		作为一个普通网站，我们所追求的只是在进行交易、密码登陆等操 作时的安全。通过配置Nginx服务器，可以使用rewrite来做到这一点。

		在https server下加入如下配置：

		if ($uri !~* "/logging.php$")
		{
		    rewrite ^/(.*)$ http://$host/$1 redirect;
		}
		 
		在http server下加入如下配置：

		if ($uri ~* "/logging.php$")
		{
		    rewrite ^/(.*)$ https://$host/$1 redirect;
		}
		 
		这样一来，用户会且只会在访问logging.php的情况下，才会通过https访问。

		更新：有一些开发框架会根据 $_SERVER['HTTPS'] 这个 PHP 变量是否为 on 来判断当前的访问请求是否是使用 https。为此我们需要在 Nginx 配置文件中添加一句来设置这个变量。遇到 https 链接重定向后会自动跳到 http 问题的同学可以参考一下。

		server {
		    ...
		    listen 443;
		    location \.php$ {
		        ...
		        include fastcgi_params;
		        fastcgi_param HTTPS on; # 多加这一句
		    }
		}
		 
		server {
		    ...
		    listen 80;
		    location \.php$ {
		        ...
		        include fastcgi_params;
		    }
		}