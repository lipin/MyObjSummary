
分析SQL执行带来的开销优化sql语句.

A.profile
	1.使用之前先查看当前数据库的版本信息,低版本无法使用.
		show version();  或者 show variables like '%version%'
	2.查看profiling
		show variables like '%profil%'	;

		result:
			+------------------------+-------+  
			| Variable_name          | Value |  
			+------------------------+-------+  
			| have_profiling         | YES   |   --只读变量，用于控制是否由系统变量开启或禁用profiling  
			| profiling              | OFF   |   --开启SQL语句剖析功能  
			| profiling_history_size | 15    |   --设置保留profiling的数目，缺省为15，范围为0至100，为0时将禁用p

		show profiles; 查看是否开启,效果同上.
	3.查看使用说明 
		help profile;
	4.开启profile
		set profiling=1; 赋值时候不要有多余的空格.
	5.运行sql,查看对应的profile
		select * from test ;
		show profiles;			

		result:
		+----------+------------+--------------------------------------------------------------------------------------------------------------------------+
		| Query_ID | Duration   | Query                                                                                                                    |
		+----------+------------+--------------------------------------------------------------------------------------------------------------------------+
		|       28 | 0.00033575 | select * from test                                                                                        |
		+----------+------------+--------------------------------------------------------------------------------------------------------------------------+

		分析sql性能,分析的时候可以加上对应的开销字段
		show profile [cpu,io][all] for query 28 ;

		show profile for query 28 ;

		+----------------------+----------+
		| Status               | Duration |
		+----------------------+----------+
		| starting             | 5.7E-5   |
		| checking permissions | 7E-6     |
		| Opening tables       | 1.7E-5   |
		| init                 | 2.3E-5   |
		| System lock          | 8E-6     |
		| optimizing           | 5E-6     |
		| statistics           | 1.1E-5   |
		| preparing            | 9E-6     |
		| executing            | 3E-6     |
		| Sending data         | 8.8E-5   |
		| end                  | 5E-6     |
		| query end            | 6E-6     |
		| closing tables       | 5E-6     |
		| freeing items        | 7.8E-5   |
		| cleaning up          | 1.5E-5   |
		+----------------------+----------+
	6.关闭
		set profiling=off;	

B.explain (查看sql语句的执行情况,索引是否生效,查询中有那些索引)
	EXPLAIN SELECT * FROM table WHERE id =1	;

	结果如下:
   	table：显示这一行的数据是关于哪张表的

	type：这是重要的列，显示连接使用了何种类型。从最好到最差的连接类型为const、eq_reg、ref、range、indexhe和ALL

	possible_keys：显示可能应用在这张表中的索引。如果为空，没有可能的索引。可以为相关的域从WHERE语句中选择一个合适的语句

	key： 实际使用的索引。如果为NULL，则没有使用索引。很少的情况下，MYSQL会选择优化不足的索引。这种情况下，可以在SELECT语句中使用USE INDEX（indexname）来强制使用一个索引或者用IGNORE INDEX（indexname）来强制MYSQL忽略索引

	key_len：使用的索引的长度。在不损失精确性的情况下，长度越短越好

	ref：显示索引的哪一列被使用了，如果可能的话，是一个常数

	rows：MYSQL认为必须检查的用来返回请求数据的行数

	extra：关于MYSQL如何解析查询的额外信息。